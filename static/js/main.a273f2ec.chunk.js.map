{"version":3,"sources":["logo.svg","axios.js","requests.js","Row.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","instance","axios","create","baseURL","API_KEY","requests","fetchTreanding","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","console","log","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","titile","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","toLowerCase","info","warn","debug","requsets","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a273f2ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n    \nexport default instance;","const API_KEY = \"267eabd47194f973be04a1305bb4be4c\";\n\nconst requests = {\n  fetchTreanding: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&width_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import {\n  YoutubeSearchedFor,\n  YoutubeSearchedForSharp,\n} from \"@material-ui/icons\";\nimport React, { useEffect, useState } from \"react\";\nimport YouTube from \"react-youtube\";\nimport axios from \"./axios\";\nimport requests from \"./requests\";\nimport \"./Row.css\";\nimport movieTrailer from \"movie-trailer\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  //A snippet of code which runs bsed on a specific  condition\n\n  useEffect(() => {\n    //run once when the app loads and not again and again......\n\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return requests;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n  console.log(movies);\n\n  const a = 1;\n\n  const base_url = \"https://image.tmdb.org/t/p/original/\";\n\n  const handleClick = (movie) => {\n    // console.log(movie);\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || \"\")\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      {/* title */}\n\n      <h2>{title}</h2>\n\n      <div className=\"row__posters\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n            src={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {/* container > posters */}\n\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./requests\";\nimport \"./Banner.css\";\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n\n      console.log(\n        \"lalit kumar\",\n\n        Math.floor(Math.random() * request.data.results.length - 1)\n      );\n    }\n    fetchData();\n  }, []);\n\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url('https://image.tmdb.org/t/p/original/${movie?.backdrop_path}')`,\n      }}\n    >\n      <div className=\"banner__contents\">\n        {/* title */}\n        <h1 className=\"banner__title\">\n          {movie?.titile || movie?.name || movie?.original_name}\n        </h1>\n\n        {/* div>2 buttons */}\n        <div className=\"banner__buttons\">\n          <button className=\"banner__button\">Play</button>\n          <button className=\"banner__button\">My List</button>\n        </div>\n        <h1 className=\"banner__description\">\n          {truncate(movie?.overview, 400)}\n        </h1>\n        {/* description */}\n      </div>\n\n      <div className=\"banner--fadeBottom\"></div>\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Nav.css\";\n\nfunction Nav() {\n  const [show, handleShow] = useState(false);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        handleShow(true);\n      } else {\n        handleShow(false);\n      }\n      return () => {\n        window.removeEventListener(\"scroll\");\n      };\n    });\n  }, []);\n\n  return (\n    <div className={`nav ${show && \"nav__black\"}`}>\n      <img\n        className=\"nav__logo\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\n        alt=\"Netflix Logo\"\n      />\n\n      <img\n        src=\"https://www.startupdelta.org/wp-content/uploads/2018/04/No-profile-LinkedIn.jpg\"\n        alt=\"avatar\"\n        className=\"nav__avatar\"\n      />\n    </div>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport requsets from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\nfunction App() {\n  useEffect(()=>{\n    let NODE_ENV = \"Production\"\n    if ((NODE_ENV || \"\").toLowerCase() === \"production\") {\n  console.log = function () {return 0};\n  console.info = function () {return 0};\n  console.warn = function () {return 0};\n  console.error = function () {return 0};\n  console.debug = function () {return 0};\n}\n  })\n  return (\n    <div className=\"app\">\n      {/* Nav */}\n      <Nav />\n      {/* Banner */}\n      <Banner />\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow={true}\n      />\n      <Row title=\"Trending Now\" fetchUrl={requsets.fetchTreanding} />\n      <Row title=\"Top Rated\" fetchUrl={requsets.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requsets.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requsets.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requsets.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requsets.fetchRomanceMovies} />\n      <Row title=\"Documentry Movies\" fetchUrl={requsets.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}